# import asyncio
# import json
# from dotenv import load_dotenv
# load_dotenv()  # –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env –≤ os.environ
# import logging
# import os
# from datetime import datetime, timedelta, timezone
#
# import nltk
# from telegram import Update
# from telegram.ext import (
#     ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
# )
#
# from google.auth.transport.requests import Request
# from google.oauth2.credentials import Credentials
# from google_auth_oauthlib.flow import InstalledAppFlow
# from googleapiclient.discovery import build
#
# from intent import SemanticFAQ, keyword_fallback
#
# # --- –õ–æ–≥–∏ ---
# logging.basicConfig(
#     format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
#     level=logging.INFO
# )
# logger = logging.getLogger("ai_schedule_bot")
#
# # --- NLTK —Ä–µ—Å—É—Ä—Å—ã (–±–µ–∑ punkt_tab) ---
# nltk.download("punkt", quiet=True)
#
# # --- Google Calendar ---
# SCOPES = ["https://www.googleapis.com/auth/calendar.readonly"]
# CREDS_FILENAME = os.environ.get("GOOGLE_CREDENTIALS", "credentials.json")
# TOKEN_FILENAME = os.environ.get("GOOGLE_TOKEN_FILE", "token.json")
#
# def get_calendar_service():
#     creds = None
#     if os.path.exists(TOKEN_FILENAME):
#         creds = Credentials.from_authorized_user_file(TOKEN_FILENAME, SCOPES)
#     if not creds or not creds.valid:
#         if creds and creds.expired and creds.refresh_token:
#             logger.info("Refreshing Google token...")
#             creds.refresh(Request())
#         else:
#             logger.info("Launching OAuth flow for Google...")
#             flow = InstalledAppFlow.from_client_secrets_file(CREDS_FILENAME, SCOPES)
#             creds = flow.run_local_server(port=0)
#         with open(TOKEN_FILENAME, "w") as token:
#             token.write(creds.to_json())
#             logger.info("Google token stored in %s", TOKEN_FILENAME)
#     return build("calendar", "v3", credentials=creds)
#
# # --- –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π ---
# faq = SemanticFAQ()  # –ª–µ–Ω–∏–≤–æ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ
#
# HELP_TEXT = (
#     "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫—É—Ä—Å–∞ üìö\n\n"
#     "–Ø —É–º–µ—é:\n"
#     "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, –∞—É–¥–∏—Ç–æ—Ä–∏—è—Ö, –¥–µ–¥–ª–∞–π–Ω–∞—Ö, —ç–∫–∑–∞–º–µ–Ω–∞—Ö\n"
#     "‚Ä¢ –ò—Å–∫–∞—Ç—å —Å–º—ã—Å–ª–æ–≤–æ–π –æ—Ç–≤–µ—Ç –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π (–¥–∞–∂–µ –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω ¬´–ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏¬ª)\n"
#     "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã –∏–∑ Google Calendar: /reminders\n\n"
#     "–ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å: ¬´–∫–æ–≥–¥–∞ –ª–µ–∫—Ü–∏—è?¬ª, ¬´–≥–¥–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∑–∞–Ω—è—Ç–∏–µ?¬ª, ¬´–∫–æ–≥–¥–∞ –¥–µ–¥–ª–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞?¬ª"
# )
#
# async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     await update.message.reply_text(HELP_TEXT)
#
# async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     await update.message.reply_text(HELP_TEXT)
#
# async def reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     try:
#         service = get_calendar_service()
#         now = datetime.now(timezone.utc).isoformat()
#         week_later = (datetime.now(timezone.utc) + timedelta(days=7)).isoformat()
#
#         events_result = service.events().list(
#             calendarId="primary",
#             timeMin=now,
#             timeMax=week_later,
#             maxResults=10,
#             singleEvents=True,
#             orderBy="startTime"
#         ).execute()
#         events = events_result.get("items", [])
#
#         if not events:
#             reply = "–ë–ª–∏–∂–∞–π—à–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –Ω–µ—Ç."
#         else:
#             lines = ["–ë–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã:"]
#             for event in events:
#                 start = event.get("start", {}).get("dateTime") or event.get("start", {}).get("date")
#                 summary = event.get("summary", "(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)")
#                 try:
#                     # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ï–≤—Ä–æ–ø–∞/–•–µ–ª—å—Å–∏–Ω–∫–∏ ~ UTC+2/+3)
#                     dt = datetime.fromisoformat(start.replace("Z", "+00:00"))
#                     local = dt.astimezone()  # —Å–∏—Å—Ç–µ–º–Ω—ã–π TZ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞/—Ö–æ—Å—Ç–∞
#                     start_str = local.strftime("%d.%m.%Y %H:%M")
#                 except Exception:
#                     start_str = start
#                 lines.append(f"‚Ä¢ {summary} ‚Äî {start_str}")
#             reply = "\n".join(lines)
#         await update.message.reply_text(reply)
#     except Exception as e:
#         logger.exception("reminders failed: %s", e)
#         await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar. –ü—Ä–æ–≤–µ—Ä—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ —Ñ–∞–π–ª credentials.json.")
#
# async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     text = (update.message.text or "").strip()
#     if not text:
#         return
#
#     # 1) —Å–Ω–∞—á–∞–ª–∞ –±—ã—Å—Ç—Ä—ã–π —Ñ–æ–ª–ª–±–µ–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
#     kw = keyword_fallback(text)
#     if kw:
#         await update.message.reply_text(kw)
#         return
#
#     # 2) –∑–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
#     try:
#         ans, score = faq.search(text, top_k=1)
#         # –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
#         if score >= 0.45:
#             await update.message.reply_text(ans)
#         else:
#             await update.message.reply_text("–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å. –£—Ç–æ—á–Ω–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π /reminders –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤.")
#     except Exception as e:
#         logger.warning("semantic search failed, fallback. err=%s", e)
#         await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /reminders.")
#
# def main():
#     token = os.environ.get("TELEGRAM_TOKEN")
#     if not token:
#         raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
#
#     app = ApplicationBuilder().token(token).build()
#
#     app.add_handler(CommandHandler("start", start))
#     app.add_handler(CommandHandler("help", help_cmd))
#     app.add_handler(CommandHandler("reminders", reminders))
#     app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
#
#     logger.info("Bot is up. Waiting for messages...")
#     app.run_polling()
#
# if __name__ == "__main__":
#     main()
import os
import logging
from datetime import datetime, timedelta, timezone

import nltk
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
)

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build

# --- –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è Hugging Face (Windows) ---
os.environ["HF_HUB_DISABLE_SYMLINKS_WARNING"] = "1"
os.environ["HF_HUB_DISABLE_XET_WARNING"] = "1"

from intent import SemanticFAQ, keyword_fallback

# --- –õ–æ–≥–∏ ---
logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    level=logging.INFO
)
logger = logging.getLogger("ai_schedule_bot")

# --- NLTK —Ä–µ—Å—É—Ä—Å—ã ---
nltk.download("punkt", quiet=True)

# --- Google Calendar ---
SCOPES = ["https://www.googleapis.com/auth/calendar.readonly"]
CREDS_FILENAME = os.environ.get("GOOGLE_CREDENTIALS", "credentials.json")
TOKEN_FILENAME = os.environ.get("GOOGLE_TOKEN_FILE", "token.json")


def get_calendar_service():
    creds = None
    if os.path.exists(TOKEN_FILENAME):
        creds = Credentials.from_authorized_user_file(TOKEN_FILENAME, SCOPES)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            logger.info("Refreshing Google token...")
            creds.refresh(Request())
        else:
            logger.info("Launching OAuth flow for Google...")
            flow = InstalledAppFlow.from_client_secrets_file(CREDS_FILENAME, SCOPES)
            creds = flow.run_local_server(port=0)
        with open(TOKEN_FILENAME, "w") as token:
            token.write(creds.to_json())
            logger.info("Google token stored in %s", TOKEN_FILENAME)
    return build("calendar", "v3", credentials=creds)


# --- –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–Ω–µ –ª–µ–Ω–∏–≤–æ) ---
logger.info("Loading SemanticFAQ model...")
faq = SemanticFAQ()  # –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É, –±–æ—Ç –Ω–µ –∑–∞–≤–∏—Å–Ω–µ—Ç –Ω–∞ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
logger.info("Model loaded!")


HELP_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫—É—Ä—Å–∞ üìö\n\n"
    "–Ø —É–º–µ—é:\n"
    "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, –∞—É–¥–∏—Ç–æ—Ä–∏—è—Ö, –¥–µ–¥–ª–∞–π–Ω–∞—Ö, —ç–∫–∑–∞–º–µ–Ω–∞—Ö\n"
    "‚Ä¢ –ò—Å–∫–∞—Ç—å —Å–º—ã—Å–ª–æ–≤–æ–π –æ—Ç–≤–µ—Ç –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π (–¥–∞–∂–µ –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω ¬´–ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏¬ª)\n"
    "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã –∏–∑ Google Calendar: /reminders\n\n"
    "–ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å: ¬´–∫–æ–≥–¥–∞ –ª–µ–∫—Ü–∏—è?¬ª, ¬´–≥–¥–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∑–∞–Ω—è—Ç–∏–µ?¬ª, ¬´–∫–æ–≥–¥–∞ –¥–µ–¥–ª–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞?¬ª"
)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_TEXT)


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_TEXT)


async def reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        service = get_calendar_service()
        now = datetime.now(timezone.utc).isoformat()
        week_later = (datetime.now(timezone.utc) + timedelta(days=7)).isoformat()

        events_result = service.events().list(
            calendarId="primary",
            timeMin=now,
            timeMax=week_later,
            maxResults=10,
            singleEvents=True,
            orderBy="startTime"
        ).execute()
        events = events_result.get("items", [])

        if not events:
            reply = "–ë–ª–∏–∂–∞–π—à–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –Ω–µ—Ç."
        else:
            lines = ["–ë–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã:"]
            for event in events:
                start = event.get("start", {}).get("dateTime") or event.get("start", {}).get("date")
                summary = event.get("summary", "(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)")
                try:
                    dt = datetime.fromisoformat(start.replace("Z", "+00:00"))
                    local = dt.astimezone()
                    start_str = local.strftime("%d.%m.%Y %H:%M")
                except Exception:
                    start_str = start
                lines.append(f"‚Ä¢ {summary} ‚Äî {start_str}")
            reply = "\n".join(lines)
        await update.message.reply_text(reply)
    except Exception as e:
        logger.exception("reminders failed: %s", e)
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar. –ü—Ä–æ–≤–µ—Ä—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ —Ñ–∞–π–ª credentials.json."
        )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if not text:
        return

    # –ë—ã—Å—Ç—Ä—ã–π —Ñ–æ–ª–ª–±–µ–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    kw = keyword_fallback(text)
    if kw:
        await update.message.reply_text(kw)
        return

    # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
    try:
        ans, score = faq.search(text, top_k=1)
        if score >= 0.45:
            await update.message.reply_text(ans)
        else:
            await update.message.reply_text(
                "–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å. –£—Ç–æ—á–Ω–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π /reminders."
            )
    except Exception as e:
        logger.warning("semantic search failed, fallback. err=%s", e)
        await update.message.reply_text(
            "–ü–æ–∫–∞ –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /reminders."
        )


def main():
    from dotenv import load_dotenv

    load_dotenv()  # –∑–∞–≥—Ä—É–∂–∞–µ–º .env –≤ os.environ

    token = os.environ.get("TELEGRAM_TOKEN")
    if not token:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("reminders", reminders))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    logger.info("Bot is up. Waiting for messages...")
    app.run_polling()


if __name__ == "__main__":
    main()

# import os
# import logging
# from datetime import datetime
# from telegram import Update
# from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
#
# from google.oauth2.credentials import Credentials
# from googleapiclient.discovery import build
# from google.auth.transport.requests import Request
#
# from transformers import AutoModelForCausalLM, AutoTokenizer
# import torch
# from dotenv import load_dotenv
#
# # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# load_dotenv()
# TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
#
# # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# logging.basicConfig(
#     format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
# )
#
# # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Calendar
# SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']
# CREDENTIALS_FILE = 'credentials.json'
#
#
# def get_calendar_service():
#     creds = None
#     if os.path.exists(CREDENTIALS_FILE):
#         creds = Credentials.from_authorized_user_file(CREDENTIALS_FILE, SCOPES)
#     if creds and creds.expired and creds.refresh_token:
#         creds.refresh(Request())
#     service = build('calendar', 'v3', credentials=creds)
#     return service
#
#
# # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å RuGPT
# MODEL_NAME = "sberbank-ai/rugpt3small_based_on_gpt2"
# tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
# model = AutoModelForCausalLM.from_pretrained(MODEL_NAME)
#
#
# def generate_rugpt_response(question: str) -> str:
#     """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é RuGPT."""
#     input_ids = tokenizer.encode(question, return_tensors="pt")
#     output_ids = model.generate(
#         input_ids,
#         max_length=200,
#         do_sample=True,
#         top_p=0.95,
#         top_k=50,
#         temperature=0.8,
#         pad_token_id=tokenizer.eos_token_id
#     )
#     response = tokenizer.decode(output_ids[0], skip_special_tokens=True)
#     return response
#
#
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     await update.message.reply_text(
#         "–ü—Ä–∏–≤–µ—Ç! –Ø —É—á–µ–±–Ω—ã–π –±–æ—Ç RuGPT. –ü–æ–º–æ–≥–∞—é —Å —É—á–µ–±–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞—é —Ç–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar."
#     )
#
#
# async def reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     service = get_calendar_service()
#     now = datetime.utcnow().isoformat() + 'Z'
#     events_result = service.events().list(
#         calendarId='primary', timeMin=now, maxResults=10, singleEvents=True, orderBy='startTime'
#     ).execute()
#     events = events_result.get('items', [])
#
#     if not events:
#         await update.message.reply_text("–°–æ–±—ã—Ç–∏–π –Ω–µ—Ç.")
#         return
#
#     reply = "–¢–≤–æ–∏ –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è:\n"
#     for event in events:
#         start = event['start'].get('dateTime', event['start'].get('date'))
#         reply += f"- {event['summary']} ({start})\n"
#
#     await update.message.reply_text(reply)
#
#
# async def answer_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     question = update.message.text
#     response = generate_rugpt_response(question)
#     await update.message.reply_text(response)
#
#
# # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# def main():
#     app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
#
#     app.add_handler(CommandHandler("start", start))
#     app.add_handler(CommandHandler("reminders", reminders))
#     app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, answer_question))
#
#     print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
#     app.run_polling()
#
#
# if __name__ == "__main__":
#     main()
